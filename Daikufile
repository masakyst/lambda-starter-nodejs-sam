
use Cwd 'getcwd';

my $BABELRC = << "BABELRC";
{
  "presets": [
    "flow",
    ["env", {
      "targets": {
        "node": "8.10"
      }
    }]
  ]
}
BABELRC

my $PACKAGE_JSON = << "PACKAGE_JSON";
{
  "name": "%s",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "files": [
    "dist"
  ],
  "scripts": {
    "start": "run-p watch startapi",
    "startapi": "sam local start-api",
    "watch": "run-s __dist:cp_packagejson __dist:npminstall __babel:devel",
    "build": "run-s __dist:cp_packagejson __dist:npminstall __babel:prod",
    "flow": "flow",
    "clean": "rm ./dist/index.js",
    "app:create": "run-s __sam:s3create",
    "app:package": "run-s build __sam:package",
    "app:deploy": "run-s __sam:deploy",
    "__babel:devel": "babel -w src -d ./dist",
    "__babel:prod": "babel src -d ./dist",
    "__sam:s3create":"aws s3 mb s3://%s --region ap-northeast-1",
    "__sam:package": "aws cloudformation package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket %s",
    "__sam:deploy": "aws cloudformation deploy --template-file packaged.yaml --stack-name %s-stack --capabilities CAPABILITY_IAM",
    "__dist:cp_packagejson": "cp ./package.json ./dist/",
    "__dist:npminstall": "cd ./dist && npm install --production && cd ../"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "aws-sam-local": "^0.2.11",
    "babel-cli": "6.26.0",
    "babel-core": "6.26.0",
    "babel-loader": "7.1.4",
    "babel-preset-env": "1.7.0",
    "babel-preset-flow": "6.23.0",
    "flow-bin": "0.70.0",
    "flow-typed": "2.4.0",
    "npm-run-all": "4.1.3"
  },
  "dependencies": {
    "aws-sdk": "2.223.1"
  }
}
PACKAGE_JSON

my $ENVRC = << 'ENVRC';
export PATH=$PATH:`pwd`/node_modules/.bin:`pwd`/node_modules/aws-sam-local/node_modules/.bin
ENVRC

my $INDEX_JS_HANDLER = << 'INDEX_JS_HANDLER';
import * as AWS from 'aws-sdk';

export function handler(event, context, callback) {
    try {
        console.log("success");
        callback(null, { 
                   statusCode: 200,
                   body: "Hello nodejs"
                }); 



    } catch (err) {
        console.error(err) 
        callback(err);
    }   
}
INDEX_JS_HANDLER

my $TEST1_JSON = << 'TEST1_JSON';
{
    "name": "masakyst",
    "key3": "12345"
}
TEST1_JSON


my $FLOW_CONFIG = << 'FLOW_CONFIG';
[ignore]
.*/node_modules/.*
.*/dist/.*

[include]

[libs]
flow-typed

[lints]

[options]

[strict]
FLOW_CONFIG

my $SAM_TEMPLATE = << 'SAM_TEMPLATE';
AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My first serverless application.

#Parameters:
#  Env:
#    Type: String
#    AllowedValues:
#      - prod
#      - dev
#    Default: dev

#Mappings:
#  EnvMap:
#    prod:
#      TwitterAccessToken: ''
#      TwitterAccessTokenSecret: ''
#    stg:
#      TwitterAccessToken: ''
#      TwitterA

Resources:
            
  Products:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128 
      Timeout: 10
      #Environment:
      #  Variables:
      #    DYNAMO_REGION: "ap-northeast-1"

      Events:
        ListProducts:
          Type: Api
          Properties:
            Path: /products
            Method: get

      #Policies:
      #  - Version: '2012-10-17'
      #    Statement:
      #      - Effect: Allow
      #        Action:
      #          - 'dynamodb:Query'
      #          - 'dynamodb:GetItem'
      #        Resource:
      #          - 'arn:aws:dynamodb:ap-northeast-1:*'
SAM_TEMPLATE


sub create_file {
    my ($path, $source) = @_;
    open my $fh, '>', $path or die qw/Can't open file: $!/;
    print $fh $source;
    close $fh;
}

namespace create => sub {
    
    desc 'create Lambda function files';
    task nodejs => sub {
        # setup git
        {
            sh q(git init);
            create_file('.gitignore', ".idea\n/dist\n/node_modules");
        }
        # setup nodejs/babel
        {
            create_file('.babelrc', $BABELRC);
            create_file('.npmrc', "save-exact=true");
            my $func_name = (split('/', getcwd))[-1];
            create_file('package.json', sprintf($PACKAGE_JSON, $func_name, $func_name, $func_name, $func_name));
            sh q(npm install);
        }
        # setup direnv
        {
            create_file('.envrc', $ENVRC);
            sh q(direnv allow);
        }
        # index.js handler
        {
            sh q(mkdir src);
            create_file('./src/index.js', $INDEX_JS_HANDLER);
            sh q(mkdir tests);
            create_file('./tests/event.json', $TEST1_JSON);
        }
        # flow!
        {
            # sh q(npm run flow init);
            create_file('.flowconfig', $FLOW_CONFIG);
        }
        # sam
        {
            create_file('template.yaml', $SAM_TEMPLATE);
        }
        # bye!!
        sh q(rm ./Daikufile);
    };

};
